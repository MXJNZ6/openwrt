name: Update

env:
  FILE_NAME: MASTER
  REPO_BRANCH: master 
  REPO_URL_OAF: https://github.com/destan19/OpenAppFilter
  REPO_URL_OPENCLASH: https://github.com/vernesong/OpenClash
  REPO_URL_DOCKERMAN: https://github.com/lisaac/luci-app-dockerman
  REPO_URL_ARGON: https://github.com/jerrykuku/luci-app-argon-config
  REPO_URL_OPENTOMATO: https://github.com/Leo-Jo-My/luci-theme-opentomato
  REPO_URL_MUSIC: https://github.com/UnblockNeteaseMusic/luci-app-unblockneteasemusic
 
  REPO_BRANCH_01: main
  REPO_URL_AMLOGIC: https://github.com/ophub/luci-app-amlogic
  REPO_URL_LIENOL: https://github.com/Lienol/openwrt-package
  REPO_URL_ALIYUN: https://github.com/messense/aliyundrive-webdav
  REPO_URL_IKOOLPROXY: https://github.com/iwrt/luci-app-ikoolproxy
  REPO_URL_NEOBIRD: https://github.com/thinktip/luci-theme-neobird
  REPO_URL_PASSWALL2: https://github.com/xiaorouji/openwrt-passwall2

  REPO_BRANCH_02: packages
  REPO_URL_PASSWALL: https://github.com/xiaorouji/openwrt-passwall
  
  REPO_BRANCH_03: openwrt-18.06
  REPO_URL_ROSY: https://github.com/rosywrt/luci-theme-rosy

on:
  workflow_dispatch:
  schedule:
    - cron: 0 7/8 * * *

jobs:
  oaf:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_OAF -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},oaf上网控制源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  Openclash:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_OPENCLASH -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},Openclash源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  dockerman:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_DOCKERMAN -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},dockerman源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  argon:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_ARGON -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},argon主题源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  OPENTOMATO:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_OPENTOMATO -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},opentomato主题源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  MUSIC:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_MUSIC -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},网易云音乐解锁源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  PASSWALL2:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_PASSWALL2 -b $REPO_BRANCH_01 .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},passwall主程序源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  AMLOGIC:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_AMLOGIC -b $REPO_BRANCH_01 .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},晶晨宝盒源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  LIENOL:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_LIENOL -b $REPO_BRANCH_01 .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},lienol插件源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  ALIYUN:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_ALIYUN -b $REPO_BRANCH_01 .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},阿里云盘web服务源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  IKOOLPROXY:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_IKOOLPROXY -b $REPO_BRANCH_01 .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},ikoolproxy广告拦截源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  NEOBIRD:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_NEOBIRD -b $REPO_BRANCH_01 .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},neobird主题源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  PASSWALL:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_PASSWALL -b $REPO_BRANCH_02 .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},passwall依赖源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  ROSY:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_ROSY -b $REPO_BRANCH_03 .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},rosy主题源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
