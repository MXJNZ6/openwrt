name: Update

env:
  FILE_NAME: MASTER
  REPO_BRANCH: master
  REPO_BRANCH_01: main
  REPO_BRANCH_02: packages
  REPO_URL_OAF: https://github.com/destan19/OpenAppFilter
  REPO_URL_LUCI: https://github.com/coolsnowwolf/luci
  REPO_URL_SSRPLUS: https://github.com/fw876/helloworld
  REPO_URL_ROSY: https://github.com/rosywrt/luci-theme-rosy
  REPO_URL_OPENCLASH: https://github.com/vernesong/OpenClash
  REPO_URL_PACKAGES: https://github.com/coolsnowwolf/packages
  REPO_URL_AMLOGIC: https://github.com/ophub/luci-app-amlogic
  REPO_URL_LIENOL_IPK: https://github.com/Lienol/openwrt-package
  REPO_URL_ALIYUN: https://github.com/messense/aliyundrive-webdav
  REPO_URL_DOCKERMAN: https://github.com/lisaac/luci-app-dockerman
  REPO_URL_PASSWALL: https://github.com/xiaorouji/openwrt-passwall
  REPO_URL_IKOOLPROXY: https://github.com/iwrt/luci-app-ikoolproxy
  REPO_URL_NEOBIRD: https://github.com/thinktip/luci-theme-neobird
  REPO_URL_PASSWALL2: https://github.com/xiaorouji/openwrt-passwall2
  REPO_URL_ARGON: https://github.com/jerrykuku/luci-app-argon-config 
  REPO_URL_OPENTOMATO: https://github.com/Leo-Jo-My/luci-theme-opentomato
  REPO_URL_MUSIC: https://github.com/UnblockNeteaseMusic/luci-app-unblockneteasemusic
#  REPO_URL_CESHI: https://github.com/XXX

on:
  workflow_dispatch:
  schedule:
    - cron: 0 7/8 * * *

jobs:
  lede:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_LEDE -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},lede源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  ssrplus:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_SSRPLUS -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},ssrplus源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  passwall:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_PASSWALL -b $REPO_BRANCH_02 .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},passwall源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  Openclash:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_OPENCLASH -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},Openclash源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  LEDE_luci:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_LUCI -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},LEDE_luci源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"      
        
  LEDE_packages:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_PACKAGES -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
        
    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }},LEDE_packages源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

#  over:
#    needs: [lede,ssrplus,passwall,Openclash,LEDE_luci,LEDE_packages]
#    runs-on: ubuntu-latest
#    steps:
#    - name: Trigger build
#      if:
#      uses: peter-evans/repository-dispatch@v1
#      with:
#        token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
#        event-type: Source Code Update
